# Google Cloud Build configuration for FastAPI with Firebase
steps:
  # Build the Docker image using Cloud Build
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '--target', 'production',
      '--tag', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA',
      '--tag', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest',
      '--build-arg', 'BUILDKIT_INLINE_CACHE=1',
      '--cache-from', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest',
      '.'
    ]
    id: 'build-image'

  # Push the image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA']
    id: 'push-image'
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest']
    id: 'push-latest'
    waitFor: ['build-image']

  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', '${_SERVICE_NAME}',
      '--image', 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA',
      '--region', '${_REGION}',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--memory', '${_MEMORY}',
      '--cpu', '${_CPU}',
      '--concurrency', '${_CONCURRENCY}',
      '--max-instances', '${_MAX_INSTANCES}',
      '--min-instances', '${_MIN_INSTANCES}',
      '--timeout', '${_TIMEOUT}',
      '--port', '8000',
      '--set-env-vars', 'ENVIRONMENT=${_ENVIRONMENT},FIREBASE_PROJECT_ID=$PROJECT_ID,GOOGLE_CLOUD_PROJECT=$PROJECT_ID',
      '--set-secrets', 'SECRET_KEY=secret-key:latest,FIREBASE_CREDENTIALS=firebase-service-account:latest',
      '--service-account', '${_SERVICE_ACCOUNT}',
      '--vpc-connector', '${_VPC_CONNECTOR}',
      '--vpc-egress', '${_VPC_EGRESS}',
      '--ingress', 'all',
      '--execution-environment', 'gen2',
      '--cpu-boost'
    ]
    id: 'deploy-cloud-run'
    waitFor: ['push-image']

  # Update traffic to new revision (optional - for blue/green deployments)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'services', 'update-traffic', '${_SERVICE_NAME}',
      '--region', '${_REGION}',
      '--to-latest'
    ]
    id: 'update-traffic'
    waitFor: ['deploy-cloud-run']

  # Run database migrations (if needed)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'jobs', 'execute', '${_SERVICE_NAME}-migrations',
      '--region', '${_REGION}',
      '--wait'
    ]
    id: 'run-migrations'
    waitFor: ['deploy-cloud-run']
    # Allow this step to fail (migrations job might not exist)
    allowFailure: true

  # Run health check
  - name: 'gcr.io/cloud-builders/curl'
    args: [
      '-f',
      '-X', 'GET',
      'https://${_SERVICE_NAME}-${_REGION_HASH}-${_PROJECT_SUFFIX}.a.run.app/health'
    ]
    id: 'health-check'
    waitFor: ['update-traffic']
    timeout: '60s'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'
  dynamicSubstitutions: true

# Substitutions (can be overridden when triggering the build)
substitutions:
  _SERVICE_NAME: 'fastapi-cloudrun-kit'
  _REGION: 'us-central1'
  _REGION_HASH: 'uc'
  _PROJECT_SUFFIX: 'uc.a'
  _ENVIRONMENT: 'production'
  _MEMORY: '1Gi'
  _CPU: '1'
  _CONCURRENCY: '100'
  _MAX_INSTANCES: '10'
  _MIN_INSTANCES: '1'
  _TIMEOUT: '300'
  _SERVICE_ACCOUNT: 'cloud-run-service@$PROJECT_ID.iam.gserviceaccount.com'
  _VPC_CONNECTOR: ''
  _VPC_EGRESS: 'private-ranges-only'

# Build timeout
timeout: '1200s'

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'

# Artifacts to store
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-build-artifacts'
    paths: ['cloudbuild.yaml', 'Dockerfile']
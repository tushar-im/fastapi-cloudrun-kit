version: '3.8'

services:
  # FastAPI application
  api:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - FIREBASE_PROJECT_ID=demo-project
      - USE_FIREBASE_EMULATOR=true
      - FIREBASE_AUTH_EMULATOR_HOST=firebase-emulators:9099
      - FIRESTORE_EMULATOR_HOST=firebase-emulators:8080
      - FIREBASE_STORAGE_EMULATOR_HOST=firebase-emulators:9199
      - SECRET_KEY=development-secret-key-change-in-production
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=console
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - firebase-emulators
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Firebase Emulators
  firebase-emulators:
    image: node:18-slim
    working_dir: /app
    ports:
      - "4000:4000"   # Emulator UI
      - "8080:8080"   # Firestore
      - "9099:9099"   # Auth
      - "9199:9199"   # Storage
      - "4400:4400"   # Emulator Hub
      - "4500:4500"   # Logging
    environment:
      - FIRESTORE_EMULATOR_HOST=0.0.0.0:8080
      - FIREBASE_AUTH_EMULATOR_HOST=0.0.0.0:9099
      - FIREBASE_STORAGE_EMULATOR_HOST=0.0.0.0:9199
    volumes:
      - ./firebase:/app
      - firebase-data:/app/emulators
    command: >
      bash -c "
        npm install -g firebase-tools &&
        firebase emulators:start --project demo-project
      "
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (optional, for caching and rate limiting)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (optional, for reverse proxy in production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  firebase-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  app-network:
    driver: bridge
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return request.auth != null && request.auth.uid == resource.data.owner_uid;
    }
    
    function isAdmin() {
      return request.auth != null && 
             'admin' in request.auth.token.roles;
    }
    
    function isModerator() {
      return request.auth != null && 
             ('admin' in request.auth.token.roles || 
              'moderator' in request.auth.token.roles);
    }
    
    function isOwnerOrAdmin(resource) {
      return isOwner(resource) || isAdmin();
    }
    
    function isPublicOrOwnerOrModerator(resource) {
      return resource.data.is_public == true || 
             isOwner(resource) || 
             isModerator();
    }
    
    function validateUserUpdate() {
      return request.auth != null &&
             (request.auth.uid == resource.id || isAdmin()) &&
             request.resource.data.keys().hasAll(['updated_at']) &&
             request.resource.data.updated_at == request.time;
    }
    
    function validateItemCreate() {
      return request.auth != null &&
             request.resource.data.owner_uid == request.auth.uid &&
             request.resource.data.keys().hasAll([
               'title', 'category', 'priority', 'status', 
               'owner_uid', 'created_at', 'updated_at'
             ]) &&
             request.resource.data.created_at == request.time &&
             request.resource.data.updated_at == request.time &&
             request.resource.data.title is string &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.category in ['general', 'tech', 'business', 'personal', 'other'] &&
             request.resource.data.priority in ['low', 'medium', 'high', 'urgent'] &&
             request.resource.data.status in ['draft', 'active', 'inactive', 'archived'];
    }
    
    function validateItemUpdate() {
      return request.auth != null &&
             (isOwner(resource) || isAdmin()) &&
             request.resource.data.owner_uid == resource.data.owner_uid &&
             request.resource.data.updated_at == request.time;
    }
    
    // Users collection - user profiles
    match /users/{userId} {
      // Users can read their own profile
      // Admins and moderators can read any profile
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || isModerator());
      
      // Users can create their own profile during registration
      allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.keys().hasAll(['created_at', 'updated_at']) &&
                       request.resource.data.created_at == request.time &&
                       request.resource.data.updated_at == request.time;
      
      // Users can update their own profile
      // Admins can update any profile
      allow update: if validateUserUpdate();
      
      // Only admins can delete profiles
      allow delete: if isAdmin();
    }
    
    // Items collection
    match /items/{itemId} {
      // Anyone can read public items
      // Owners can read their own items
      // Moderators can read any item
      allow read: if isPublicOrOwnerOrModerator(resource);
      
      // Authenticated users can create items
      allow create: if validateItemCreate();
      
      // Owners and admins can update items
      allow update: if validateItemUpdate();
      
      // Owners and admins can delete items
      allow delete: if isOwnerOrAdmin(resource);
    }
    
    // Item interactions collection
    match /item_interactions/{interactionId} {
      // Users can read their own interactions
      // Moderators can read any interaction
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.user_uid || isModerator());
      
      // Authenticated users can create interactions
      allow create: if request.auth != null &&
                       request.resource.data.user_uid == request.auth.uid &&
                       request.resource.data.keys().hasAll([
                         'item_id', 'user_uid', 'interaction_type', 'timestamp'
                       ]) &&
                       request.resource.data.timestamp == request.time &&
                       request.resource.data.interaction_type in ['view', 'like', 'share'];
      
      // Users can update their own interactions (e.g., unlike)
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.user_uid;
      
      // Users can delete their own interactions
      // Moderators can delete any interaction
      allow delete: if request.auth != null &&
                       (request.auth.uid == resource.data.user_uid || isModerator());
    }
    
    // System collections (admin only)
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Analytics collections (read-only for moderators)
    match /analytics/{document=**} {
      allow read: if isModerator();
      allow write: if isAdmin();
    }
    
    // Audit logs (admin only)
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      // Logs are created by backend services only
      allow create, update, delete: if false;
    }
    
    // Health check collection (public read for monitoring)
    match /health/{document} {
      allow read: if true;
      allow write: if false; // Only backend can write
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}